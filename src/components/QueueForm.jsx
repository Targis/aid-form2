import React from 'react'
import { Typography, Grid } from '@mui/material'
import { Formik, Form } from 'formik'
import Swal from 'sweetalert2'
import TextInput from 'components/inputs/TextInput'
import MaskedTextField from 'components/inputs/MaskedTextField'
import { CircularProgress, Button } from '@mui/material'
import { getFormData } from 'helpers/normalizeData'
import { dayNames } from 'helpers/date'
import getDay from 'date-fns/getDay'
import parse from 'date-fns/parse'
import addDays from 'date-fns/addDays'
import format from 'date-fns/format'
import { hubAction } from 'api'
import * as yup from 'yup'
import { parseDateString } from 'helpers/date'

// async function stall(stallTime = 3000) {
//   await new Promise(resolve => setTimeout(resolve, stallTime));
// }

const initialValues = {
  last_name: '',
  first_name: '',
  middle_name: '',
  tel: '',
  vpoNumber: '',
  vpoDate: '',
  agree: false,
  checked: false
}

const phoneNumberRegex =
  /\(?([0-9]{3})\)?([0-9]{3})[-. ]?([0-9]{2})[-. ]?([0-9]{2})$/

const today = new Date()
const minDate = new Date('2022-10-01')
const oneDayBeforeMinDate = addDays(minDate, -1)

const validationSchema = yup.object({
  last_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(2, '–î—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ'),
  first_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(2, "–î—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è"),
  middle_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(4, '–¶–µ –ø–æ–ª–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 4 —Å–∏–º–≤–æ–ª–∏'),
  tel: yup
    .string()
    .matches(
      phoneNumberRegex,
      '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É, (0–•–•)–•–•–•-–•–•-–•–•'
    )
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
  vpoNumber: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\d{4}[-]\d{10}$/, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (1234-1234567890)'),
  vpoDate: yup
    .date()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .transform(parseDateString)
    .typeError('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†')
    .min(oneDayBeforeMinDate, `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–∞—Ç–∞ ${format(minDate, 'dd.MM.yyyy')}`)
    .max(today, '–î–∞—Ç–∞ –∑ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ? ü§î'),
})

const QueueForm = () => {

  const handleSubmit = async (values, helpers) => {
    const toNormalize = ['first_name', 'last_name', 'middle_name']
    const toExclude = ['agree', 'checked']

    const data = getFormData(
      values,
      toNormalize,
      toExclude
    )

    try {
      await fetch(hubAction, {
        method: 'POST',
        body: data

      })
        .then((response) => response.json())
        .then((data) => {
          // console.log(data)

          if (data.result === 'success') {
            const { number, date, time } = data
            const day = dayNames[getDay(parse(date, 'dd.MM.yyyy', new Date()))]
            // const dateString = format(parseISO(data?.date), 'dd.MM.yyyy')
            // const time = format(parseISO(data?.time), 'hh:mm')
            Swal.fire(
              '',
              `<div style='text-align: left'>
              <table style='margin: '0 auto'>
                <tbody>
                  <tr><td>–í–∞—à ‚Ññ: </td>           <th>${number}</strong></th></tr>
                  <tr><td>–î–∞—Ç–∞: </td>            <th>${date} (${day.toLowerCase()})</th></tr>
                  <tr><td>–ß–∞—Å*: </td>            <th>${time} </th></tr>
                </tbody>
              </table>

              <br><br>
              <b> –ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> –º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 9 (–≤ –±—É–¥—ñ–≤–ª—ñ –ë–ö "–û—Ä–±—ñ—Ç–∞" –∑ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥—É).<br><br>
              –ù–æ–º–µ—Ä –≤ —á–µ—Ä–∑—ñ –¥—ñ–π—Å–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤ —Ü–µ–π –¥–µ–Ω—å. <br><br>
              * - –ß–µ—Ä–µ–∑ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏, –ø–µ—Ä–µ–±–æ—ó –∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–æ—é —Ç–∞ —ñ–Ω—à—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏ —á–∞—Å –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
              </div>
              `,
              'success')
            helpers?.resetForm()

          }
          if (data.result === 'refused') {
            Swal.fire('', '–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–∞ —Ü—é –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error')
            helpers?.resetForm()
          }

          if (data.result === 'error') {
            Swal.fire({
              title: '–ü–æ–º–∏–ª–∫–∞',
              text: `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ü–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.
                –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: ${data.error}. `,
              icon: 'error',
              confirmButtonText: '–ó–∞–∫—Ä–∏—Ç–∏'
            })
          }
        })
    } catch (error) {
      throw new Error(error)
    }
  }

  return (
    <div style={{ marginBottom: '2em' }}>

      <Typography color="inherit" variant="h6" component="div" sx={{ mb: 4 }}>
        –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ —á–µ—Ä–≥–∞ <br />
        –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ <br />
        –≤—ñ–¥ —á–µ—Å—å–∫–æ—ó –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó "–õ—é–¥–∏–Ω–∞ –≤ –±—ñ–¥—ñ"
      </Typography>

      <Typography color="inherit" variant="p" component="div" sx={{ mb: 4, textAlign: 'left' }}>
        –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É!
        <ul>
          <li>–†–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è —Å—ñ–º‚Äô—è (–¥–æ–º–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–æ).</li>
          <li>–ü–µ—Ä—à–æ—á–µ—Ä–≥–æ–≤–æ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –æ—Å–æ–±–∏, —â–æ –µ–≤–∞–∫—É—é–≤–∞–ª–∏—Å—è –ø—ñ—Å–ª—è 01 –∂–æ–≤—Ç–Ω—è 2022 —Ä–æ–∫—É (–≤–∏–º–æ–≥–∏ –ë–û "–õ—é–¥–∏–Ω–∞ –≤ –±—ñ–¥—ñ")</li>
          <li>–ü—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–¥–∏–Ω —á–ª–µ–Ω —Å—ñ–º‚Äô—ó –Ω–∞–¥–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–Ω—è –≤ –∞–Ω–∫–µ—Ç—É –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó, —â–æ–¥–æ —Å–µ–±–µ —Ç–∞ —á–ª–µ–Ω—ñ–≤ —Å—ñ–º‚Äô—ó, —è–∫—ñ –∑ –Ω–∏–º –ø—Ä–æ–∂–∏–≤–∞—é—Ç—å (–ø–∞—Å–ø–æ—Ä—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä (–†–ù–û–ö–ü–ü))</li>
        </ul>
      </Typography>

      <Typography color="inherit" variant="p" component="div" sx={{ mb: 4, textAlign: 'left' }}>
        <b>–ú—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> –º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 9 (–≤ –±—É–¥—ñ–≤–ª—ñ –ë–ö "–û—Ä–±—ñ—Ç–∞" –∑ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥—É).
      </Typography>

      <Formik
        initialValues={initialValues}
        // validateOnChange={false}
        // validateOnBlur={false}
        validationSchema={validationSchema}
        onSubmit={(values, actions) => {
          handleSubmit(values, actions)
        }}
      >
        {({ values, isSubmitting, handleSubmit }) => (
          <Form onSubmit={handleSubmit}>
            <TextInput name="last_name" label="–ü—Ä—ñ–∑–≤–∏—â–µ" fullWidth />
            <TextInput name="first_name" label="–Ü–º'—è" fullWidth />
            <TextInput name="middle_name" label="–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ" fullWidth />
            <MaskedTextField
              name="tel"
              label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
              type="tel"
              format="+38(###)###-##-##"
              // valueIsNumericString={true}
              mask="_"
              formatResult={true}
              fullWidth
              disabled={values?.checked}
            />

            <Grid container columnSpacing={2} columns={12}>
              <Grid item xs={12} sm={7}>
                <MaskedTextField
                  name="vpoNumber"
                  label="–ù–æ–º–µ—Ä –¥–æ–≤—ñ–¥–∫–∏ –í–ü–û"
                  format="####-##########"
                  // valueIsNumericString={true}
                  formatResult={true}
                  mask="_"
                  type="tel"
                  fullWidth
                />
              </Grid>
              <Grid item xs={12} sm={5}>
                <MaskedTextField
                  name="vpoDate"
                  label="–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ –¥–æ–≤—ñ–¥–∫–∏"
                  format="##.##.####"
                  mask="_"
                  type="tel"
                  // valueIsNumericString={true}
                  formatResult={true}
                  fullWidth
                />
              </Grid>
            </Grid>

            <Button
              startIcon={isSubmitting ? <CircularProgress size="1rem" /> : null}
              disabled={isSubmitting}
              variant="contained"
              color="primary"
              size="large"
              type="submit"
            >
              {isSubmitting ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'}
            </Button>

          </Form>
        )}


      </Formik>

    </div >
  )
}

export default QueueForm