import React, { useEffect, useState } from 'react'
import { Typography, Grid } from '@mui/material'
import { Formik, Form } from 'formik'
import Swal from 'sweetalert2'
import TextInput from 'components/inputs/TextInput'
import MaskedTextField from 'components/inputs/MaskedTextField'
import CheckField from 'components/inputs/CheckField'
import SimpleSelect from 'components/inputs/SimpleSelect'
import { CircularProgress, Button } from '@mui/material'
import { getFormData } from 'helpers/normalizeData'
import { dayNames } from 'helpers/date'
import getDay from 'date-fns/getDay'
import parse from 'date-fns/parse'
import addDays from 'date-fns/addDays'
import format from 'date-fns/format'
import { hubAction } from 'api'
import * as yup from 'yup'
import { parseDateString } from 'helpers/date'

// async function stall(stallTime = 3000) {
//   await new Promise(resolve => setTimeout(resolve, stallTime));
// }

const initialValues = {
  last_name: '',
  first_name: '',
  middle_name: '',
  inn: '',
  tel: '',
  vpoNumber: '',
  vpoDate: '',
  agree: false,
  checked: false
}

const phoneNumberRegex =
  /\(?([0-9]{3})\)?([0-9]{3})[-. ]?([0-9]{2})[-. ]?([0-9]{2})$/

const today = new Date()
const minDate = new Date('2022-02-24')
const oneDayBeforeMinDate = addDays(minDate, -1)

const validationSchema = yup.object({
  last_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(2, '–î—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ –ø—Ä—ñ–∑–≤–∏—â–µ'),
  first_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(2, "–î—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è"),
  middle_name: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\D+$/, '–¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —á–∏—Å–ª–∞')
    .min(4, '–¶–µ –ø–æ–ª–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 4 —Å–∏–º–≤–æ–ª–∏'),
  tel: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(
      phoneNumberRegex,
      '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É, (0–•–•)–•–•–•-–•–•-–•–•'
    ),
  inn: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .length(10, '–¶–µ –ø–æ–ª–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä'),
  vpoNumber: yup
    .string()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .matches(/^\d{4}[-]\d{10}$/, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (1234-1234567890)'),
  vpoDate: yup
    .date()
    .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ")
    .transform(parseDateString)
    .typeError('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†')
    .min(oneDayBeforeMinDate, `–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–∞—Ç–∞ ${format(minDate, 'dd.MM.yyyy')}`)
    .max(today, '–î–∞—Ç–∞ –∑ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ? ü§î'),
  agree: yup
    .boolean()
    .oneOf([true], '–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –∑–≥–æ–¥—É'),
})

const services = [
  {
    id: 1,
    name: '–ì—Ä–æ—à–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –ì–û "–õ—é–¥–∏–Ω–∞ –≤ –±—ñ–¥—ñ"',
    title: `–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ —á–µ—Ä–≥–∞ 
    –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ –≤—ñ–¥ —á–µ—Å—å–∫–æ—ó –≥—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó "–õ—é–¥–∏–Ω–∞ –≤ –±—ñ–¥—ñ"`,
    description: `‚ùó –í–ê–ñ–õ–ò–í–û: –ü—Ä–∏–π–æ–º –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—å –≤–∏–∫–ª—é—á–Ω–æ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∑–∞–ø–∏—Å–æ–º –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ–π —á–µ—Ä–∑—ñ.

      –û–¥–∏–Ω —á–ª–µ–Ω —Å—ñ–º'—ó —Ä–µ—î—Å—Ç—Ä—É—î –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —á–ª–µ–Ω—ñ–≤ —Ä–æ–¥–∏–Ω–∏.
      –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –∑–æ–∫—Ä–µ–º–∞:
      ‚ñ™ –ø–∞—Å–ø–æ—Ä—Ç –∫–æ–∂–Ω–æ–≥–æ —á–ª–µ–Ω–∞ —Ä–æ–¥–∏–Ω–∏, —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –¥–∏—Ç–∏–Ω–∏;
      ‚ñ™ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±–ª—ñ–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø–ª–∞—Ç–Ω–∏–∫–∞ –ø–æ–¥–∞—Ç–∫—ñ–≤ (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥) –∫–æ–∂–Ω–æ—ó –æ—Å–æ–±–∏, —è–∫–∞ —Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è;
      ‚ñ™ –¥–æ–≤—ñ–¥–∫–∞ –í–ü–û –∫–æ–∂–Ω–æ–≥–æ —á–ª–µ–Ω–∞ —Ä–æ–¥–∏–Ω–∏, —è–∫–∏–π –º–∞—î —Å—Ç–∞—Ç—É—Å –í–ü–û (—è–∫—â–æ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ).

      –ú—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: –º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 9 (–≤ –±—É–¥—ñ–≤–ª—ñ –ë–ö "–û—Ä–±—ñ—Ç–∞" –∑ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥—É). –ù–ï –≤ –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ñ–¥–Ω–æ—Å—Ç—ñ!`,
    action: hubAction
  }
]
const QueueForm = () => {
  const [service, setService] = useState(null)
  const [isLoading, setLoading] = useState(true)
  const [isClosed, setClosed] = useState(true)

  const isFormVisible = service && !isLoading && !isClosed

  const isFormClosed = async (action) => {
    try {
      await fetch(action, { method: 'GET' })
        .then(res => res.json())
        .then(data => {
          console.log(data)
          if (data?.status === 'open') {
            console.log(data?.status)
            setClosed(false)
          }
          return null
        })
    } catch (e) {
      throw new Error(e)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (service) {
      setClosed(isFormClosed(service?.action))
    }
  }, [service])

  const handleSubmit = async (values, helpers) => {
    const toNormalize = ['first_name', 'last_name', 'middle_name']
    const toExclude = ['agree', 'checked']

    const data = getFormData(
      values,
      toNormalize,
      toExclude
    )

    try {
      if (!service?.action) return null
      await fetch(hubAction, {
        method: 'POST',
        body: data

      })
        .then((response) => response.json())
        .then((data) => {
          // console.log(data)

          switch (data?.result) {
            case 'closed':
              Swal.fire({
                title: '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                text: `–ù–∞–∂–∞–ª—å, —á–µ—Ä–≥–∞ –≤–∂–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ —ñ —Ñ–æ—Ä–º–∞ –∑–∞–∫—Ä–∏—Ç–∞. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏.`,
                icon: 'error',
                confirmButtonText: '–ó–∞–∫—Ä–∏—Ç–∏'
              })
              break
            case 'success':
              const { number, date, time } = data
              const day = dayNames[getDay(parse(date, 'dd.MM.yyyy', new Date()))]
              // const dateString = format(parseISO(data?.date), 'dd.MM.yyyy')
              // const time = format(parseISO(data?.time), 'hh:mm')
              Swal.fire({
                html:
                  `<div style='text-align: left'>
                  <table style='margin: 0 auto; border: 2px solid #a5dc86; padding: 0.5em; border-spacing: 10px;'>
                    <tbody>
                      <tr><td>–í–∞—à ‚Ññ: </td>           <th> ${number}</strong></th></tr>
                      <tr><td>–î–∞—Ç–∞: </td>            <th> ${date} (${day.toLowerCase()})</th></tr>
                      <tr><td>–ß–∞—Å*: </td>            <th> ${time} </th></tr>
                    </tbody>
                  </table>
    
                  <br><br>
                  <b> –ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</b> –º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –≤—É–ª. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 9 (–≤ –±—É–¥—ñ–≤–ª—ñ –ë–ö "–û—Ä–±—ñ—Ç–∞" –∑ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥—É). –ù–ï –≤ –ü—Ä–æ—Å—Ç–æ—Ä—ñ –Ñ–¥–Ω–æ—Å—Ç—ñ!<br><br>
                  –ù–æ–º–µ—Ä –≤ —á–µ—Ä–∑—ñ –¥—ñ–π—Å–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤ —Ü–µ–π –¥–µ–Ω—å. <br><br>
                  * - —á–µ—Ä–µ–∑ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏, –ø–µ—Ä–µ–±–æ—ó –∑ –µ–ª–µ–∫—Ç—Ä–∏–∫–æ—é —Ç–∞ —ñ–Ω—à—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏ —á–∞—Å –º–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
                  </div>
                  `,
                icon: 'success',
                allowOutsideClick: false,
                showConfirmButton: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                confirmButtonText: '–ó–∞–∫—Ä–∏—Ç–∏'
              })
              break
            case 'refused':
              Swal.fire('', '–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–∞ —Ü—é –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', 'error')
              break
            case 'error':
              Swal.fire({
                title: '–ü–æ–º–∏–ª–∫–∞',
                text: `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ü–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.
                  –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: ${data.error}. `,
                icon: 'error',
                confirmButtonText: '–ó–∞–∫—Ä–∏—Ç–∏'
              })
              break
            default:
              console.log('Uknown answer from the server')
          }
        })
    } catch (error) {
      throw new Error(error)
    } finally {
      helpers?.resetForm()
      // helpers?.setSubmitting(false)
    }
  }

  return (
    <div style={{ marginBottom: '2em' }}>

      {!service && (
        <>
          <Typography color="inherit" variant="h5" component="div" sx={{ mb: 4 }}>
            –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ —á–µ—Ä–≥–∞
          </Typography>

          <SimpleSelect
            name="services"
            label="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É"
            options={services}
            defaultValue=""
            setOption={setService}
            current={service?.name}
            fullWidth
          />
        </>
      )}

      {/* {isLoading ? ('Loading...') : isClosed && ('–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å —Ñ–æ—Ä–º–∞ –∑–∞–∫—Ä–∏—Ç–∞. ')} */}

      {service && isLoading && (
        <>
          <div> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div> <br />
          <CircularProgress size="3rem" />
        </>
      )}

      {isClosed && !isLoading && ('–§–æ—Ä–º–∞ –∑–∞–∫—Ä–∏—Ç–∞. –ß–µ—Ä–≥–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ –∞–±–æ –∑–∞–ø–∏—Å —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è.')}

      {isFormVisible && (
        <>
          <Typography color="inherit" variant="h6" component="div" sx={{ mb: 4 }}>
            {service?.title.split('\n').map((line, k) => (
              <div key={k}>{line} <br /></div>
            ))}
          </Typography>
          {/* <Typography color="inherit" variant="p" component="div" sx={{ mb: 4, textAlign: 'left' }}>
            {service?.description.split('\n').map((line, k) => (
              <div key={k}>{line} <br /></div>
            ))}
          </Typography> */}
          <Formik
            initialValues={initialValues}
            // validateOnChange={false}
            // validateOnBlur={false}
            validationSchema={validationSchema}
            onSubmit={(values, actions) => {
              handleSubmit(values, actions)
            }}
          >
            {({ values, isSubmitting, handleSubmit }) => (
              <Form onSubmit={handleSubmit}>
                <TextInput name="last_name" label="–ü—Ä—ñ–∑–≤–∏—â–µ" fullWidth />
                <TextInput name="first_name" label="–Ü–º'—è" fullWidth />
                <TextInput name="middle_name" label="–ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ" fullWidth />

                <Grid container columnSpacing={2} columns={12}>
                  <Grid item xs={12} sm={6}>
                    <MaskedTextField
                      name="tel"
                      label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                      type="tel"
                      format="+38(###)###-##-##"
                      // valueIsNumericString={true}
                      mask="_"
                      formatResult={true}
                      fullWidth
                      disabled={values?.checked}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <MaskedTextField
                      name="inn"
                      label="–ü–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä (–†–ù–û–ö–ü–ü)"
                      format="##########"
                      type="tel"
                      mask="_"
                      valueIsNumericString={true}
                      fullWidth
                      disabled={values?.checked}
                    />
                  </Grid>
                </Grid>

                <Grid container columnSpacing={2} columns={12}>
                  <Grid item xs={12} sm={7}>
                    <MaskedTextField
                      name="vpoNumber"
                      label="–ù–æ–º–µ—Ä –¥–æ–≤—ñ–¥–∫–∏ –í–ü–û"
                      format="####-##########"
                      // valueIsNumericString={true}
                      formatResult={true}
                      mask="_"
                      type="tel"
                      fullWidth
                    />
                  </Grid>
                  <Grid item xs={12} sm={5}>
                    <MaskedTextField
                      name="vpoDate"
                      label="–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ –¥–æ–≤—ñ–¥–∫–∏"
                      format="##.##.####"
                      mask="_"
                      type="tel"
                      // valueIsNumericString={true}
                      formatResult={true}
                      fullWidth
                    />
                  </Grid>
                </Grid>

                <CheckField
                  name="agree"
                  label="–î–∞—é –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"
                  sx={{ mb: 2, textAlign: 'left' }}
                />

                <Button
                  startIcon={isSubmitting ? <CircularProgress size="1rem" /> : null}
                  disabled={isSubmitting}
                  variant="contained"
                  color="primary"
                  size="large"
                  type="submit"
                >
                  {isSubmitting ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'}
                </Button>

              </Form>
            )}

          </Formik>
        </>
      )}

    </div >
  )
}

export default QueueForm